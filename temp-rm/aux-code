        IF (id == 0) THEN
            OPEN(UNIT=1,FILE='input.ini',STATUS='old', ACTION='READ', IOSTAT=status,IOMSG=msg)
            READ(1,'(2X,F10.3)') vel
            CALL MPI_PACK(vel,1,MPI_DOUBLE_PRECISION,buf,300,pos,MPI_COMM_WORLD,ierr)
        
            READ(1,'(7X,A15)') sch
            CALL MPI_PACK(sch,15,MPI_CHARACTER,buf,300,pos,MPI_COMM_WORLD,ierr)
        
            READ(1,'(11X,A15)') func
            CALL MPI_PACK(func,15,MPI_CHARACTER,buf,300,pos,MPI_COMM_WORLD,ierr)
        
            READ(1,'(4X,F7.4)') courant
            CALL MPI_PACK(courant,1,MPI_DOUBLE_PRECISION,buf,300,pos,MPI_COMM_WORLD,ierr)
        
            READ(1,'(8X,I6)') dim
            CALL MPI_PACK(dim,1,MPI_INTEGER,buf,300,pos,MPI_COMM_WORLD,ierr)
        
            READ(1,'(3X,F10.3)') leftb
            CALL MPI_PACK(leftb,1,MPI_DOUBLE_PRECISION,buf,300,pos,MPI_COMM_WORLD,ierr)
        
            READ(1,'(3X,F10.3)') rightb
            CALL MPI_PACK(rightb,1,MPI_DOUBLE_PRECISION,buf,300,pos,MPI_COMM_WORLD,ierr)
        
            READ(1,'(14X,I3)') nwrites
            CALL MPI_PACK(nwrites,1,MPI_INTEGER,buf,300,pos,MPI_COMM_WORLD,ierr)
        
            READ(1,'(9X,F10.3)') finaltime
            CALL MPI_PACK(finaltime,1,MPI_DOUBLE_PRECISION,buf,300,pos,MPI_COMM_WORLD,ierr)
            READ(1,'(9X,I3)') strid !!! External simulation numbering system to group saved times properly when writing tecplot files
        
            CLOSE(1)
        
            CALL MPI_BCAST(buf,300,MPI_PACKED,0,MPI_COMM_WORLD,ierr)
        
        ELSE
            CALL MPI_BCAST(buf,300,MPI_PACKED,0,MPI_COMM_WORLD,ierr)
            CALL MPI_UNPACK(buf,300,pos,vel,1,MPI_DOUBLE_PRECISION,MPI_COMM_WORLD,ierr)
            !WRITE(*,*) 'Proc',id,'receives u ',vel
            CALL MPI_UNPACK(buf,300,pos,sch,15,MPI_CHARACTER,MPI_COMM_WORLD,ierr)
            !WRITE(*,*) 'Proc',id,'receives scheme ',sch
            CALL MPI_UNPACK(buf,300,pos,func,15,MPI_CHARACTER,MPI_COMM_WORLD,ierr)
            !WRITE(*,*) 'Proc',id,'receives infunction ',func
            CALL MPI_UNPACK(buf,300,pos,courant,1,MPI_DOUBLE_PRECISION,MPI_COMM_WORLD,ierr)
            !WRITE(*,*) 'Proc',id,'receives CFL ',courant
            CALL MPI_UNPACK(buf,300,pos,dim,1,MPI_INTEGER,MPI_COMM_WORLD,ierr)
            !WRITE(*,*) 'Proc',id,'receives npoints ',dim
            CALL MPI_UNPACK(buf,300,pos,leftb,1,MPI_DOUBLE_PRECISION,MPI_COMM_WORLD,ierr)
            !WRITE(*,*) 'Proc',id,'receives leftb ',leftb
            CALL MPI_UNPACK(buf,300,pos,rightb,1,MPI_DOUBLE_PRECISION,MPI_COMM_WORLD,ierr)
            !WRITE(*,*) 'Proc',id,'receives rightb ',rightb
            CALL MPI_UNPACK(buf,300,pos,nwrites,1,MPI_INTEGER,MPI_COMM_WORLD,ierr)
            !WRITE(*,*) 'Proc',id,'receives ncontrolTimes',nwrites
            CALL MPI_UNPACK(buf,200,pos,finaltime,1,MPI_DOUBLE_PRECISION,MPI_COMM_WORLD,ierr)
        END IF


SELECT CASE (infunction)
CASE ('sgn')
    FUNCTION_POINTER => SGN
CASE ('exp')
    FUNCTION_POINTER => EXPONENTIAL
CASE ('lin')
    FUNCTION_POINTER => LINEAR !USED DURING DEVELOPMENT TO SEE DIFFERENT VALUES AT EACH GRID POINT
END SELECT

CALL FLUXDETERMINATION(u,id,pp,np,imsbs,imsbe,imrbs,imrbe,ipsbs,ipsbe,iprbs,iprbe,bstart,bend,sst,istart,iend,comm  size,increment)

IF ( u > 0.0 ) THEN
    IF(id == 0) THEN
        pp = MPI_PROC_NULL !THIS WAY there are no IF's inside the time loop to distinguish processors
        np = id +1
        IF(commsize == 1) np= MPI_PROC_NULL
    ELSE IF(id == commsize - 1) THEN
        pp = id - 1
        np = MPI_PROC_NULL
    ELSE
        pp = id - 1 !previous proc
        np = id + 1 !next proc
    END IF
    
    !IMPORTANT: THE I-1 AND I+1 CONCEPTS IN THE FOLLOWING VARIABLES CORRESPONDS TO &
    !THE UPSTREAM AND DOWNSTREAM CELL WITH RESPECT TO THE RECEIVER PROCESSOR
    !THIS WILL ALLOW US TO KEEP THE TIME LOOP COMM STRUCTURE INDEPENDENT OF THE FLOW DIRECTION
    !THE SCHEMES' SUBROUTINES ALSO ADAPT TO THE FLOW DIRECTION IN THIS SENSE BY TAKING ABSOLUTE VALUE OF THE VELOCITY AND REVERSING THE SEARCHED CELL (turns i-1 into i+1)
    !"i-1" is upstream cell
    !"i+1" is downstream cell
    increment = 1
    imsbs = iend - sst + 1    ! "i-1" sent buffer start index
    imsbe = iend              ! "i-1" sent buffer end index
    imrbs = istart - sst      ! "i-1" received buffer start index
    imrbe = istart - 1        ! "i-1" received buffer end index

    ipsbs = istart            ! "i+1" sent buffer start index
    ipsbe = istart + sst - 1  ! "i+1" sent buffer end index
    iprbs = iend + 1          ! "i+1" received buffer start index
    iprbe = iend + sst        ! "i+1" received buffer end index

    !WRITE(*,100) 'u+',' Processor',id,'sends indices',imsbs,':',imsbe
    !WRITE(*,100) 'u+',' Processor',id,'recvs indices',imrbs,':',imrbe
    
    bstart = istart
    bend = istart + sst -1

ELSE IF ( u < 0.0 ) THEN
    IF(id == 0) THEN
        np = MPI_PROC_NULL
        pp = id +1
    ELSE IF(id == commsize - 1) THEN
        np = id - 1
        pp = MPI_PROC_NULL
    ELSE
        pp = id + 1 ! rank-1 sends info to this process
        np = id - 1 ! this process sends info to np
    END IF
    
    WRITE(*,*) 'Flux goes from right to left'
    increment = -1
    imsbs = istart            ! "i-1" sent buffer start index
    imsbe = istart + sst - 1  ! "i-1" sent buffer end index
    imrbs = iend + 1          ! "i-1" received buffer start index
    imrbe = iend + sst        ! "i-1" received buffer end index

    ipsbs = iend - sst + 1    ! "i+1" sent buffer start index
    ipsbe = iend              ! "i+1" sent buffer end index
    iprbs = istart - sst      ! "i+1" received buffer start index
    iprbe = istart - 1        ! "i+1" received buffer end index

    !WRITE(*,100) 'u-',' Processor',id,'sends indices',imsbs,':',imsbe
    !WRITE(*,100) 'u-',' Processor',id,'recvs indices',imrbs,':',imrbe
    bstart = iend - sst +1
    bend = iend
!    intstart = istart                    !!!THESE ARE IF I USE BUFFERED SEND
!    intend = iend - sst
ELSE
    WRITE(*,*) 'Flux is neither positive nor negative. It is either zero or an error has ocurred'
    CALL MPI_FINALIZE(ierr)
    STOP
END IF

100 FORMAT(A3,A10,I3,A15,I4,A1,I4)